This is the implementation of std::swap
namespace std {

  template<typename T>          // typical implementation of std::swap;
  void swap(T& a, T& b)         // swaps a's and b's values
  {
    T temp(a);
    a = b;
    b = temp;
  }
}

Based on this, swaping two objects may be very expensive, epecially when the data of this object is held by a ptr.
class WidgetImpl {                          // class for Widget data;
public:                                     // details are unimportant
  ...

private:
  int a, b, c;                              // possibly lots of data â€”
  std::vector<double> v;                    // expensive to copy!
  ...
};

class Widget {                              // class using the pimpl idiom
public:
  Widget(const Widget& rhs);

  Widget& operator=(const Widget& rhs)      // to copy a Widget, copy its
  {                                         // WidgetImpl object. For
   ...                                      // details on implementing
   *pImpl = *(rhs.pImpl);                   // operator= in general,
   ...                                      // see Items 10, 11, and 12.
  }
  ...

private:
  WidgetImpl *pImpl;                         // ptr to object with this
};                               // Widget's data

In this way, we should consider to implement our own swap:

1 Template specification vs 2 Template partial specification:
1 ->  it has to be a specific/concrete class    
as the ptr is private, so we also provided a swap function in the class and use this function to swap.
namespace std {

  template<>                       // revised specialization of
  void swap<Widget>(Widget& a,     // std::swap
                    Widget& b)
  {
    a.swap(b);                     // to swap Widgets, call their
  }                                // swap member function
}

class Widget {                     // same as above, except for the
public:                            // addition of the swap mem func
  ...
  void swap(Widget& other)
  {
    using std::swap;               // the need for this declaration
                                   // is explained later in this Item

    swap(pImpl, other.pImpl);      // to swap Widgets, swap their
  }                                // pImpl pointers
  ...
};


2)  if the Widget is also a template class: (we need to to partial template specialization)

wrong: partial specilization is not allowed for function
namespace std {
  template<typename T>
  void swap<Widget<T> >(Widget<T>& a,      // error! illegal code!
                        Widget<T>& b)
  { a.swap(b); }
}

Wrong: std namespace is special and cannot be overloaded
namespace std {

  template<typename T>             // an overloading of std::swap
  void swap(Widget<T>& a,          // (note the lack of "<...>" after
            Widget<T>& b)          // "swap"), but see below for
  { a.swap(b); }                   // why this isn't valid code
}

Right way:
using ur own namespace, overload your function (as partial specilization is not allowed)
namespace WidgetStuff {
  ...                                     // templatized WidgetImpl, etc.

  template<typename T>                    // as before, including the swap
  class Widget { ... };                   // member function

  ...

  template<typename T>                    // non-member swap function;
  void swap(Widget<T>& a,                 // not part of the std namespace
            Widget<T>& b)                                         
  {
    a.swap(b);
  }
}


Things to remember:
Provide a swap member function when std:swap would be inefficient for your type. Make sure your 
swap does not throw exceptions.This swap member function will be later used by template specification(specific class) 
or overloading version(if the class is template) of swap later.

If you offer a member swap, also offer a non-member swap that calls the member. For classes(not templates), specialize
std::swap, too.

When calling swap, employ a using declaration for std::swap, then call swap without namespace qualication. 
(C++'s name lookup rules ensure that this will find any T-specific swap at global scope or in the same 
namespace as the type T. Compiler will choose the most specific one. So add "using std::swap;  " but dont write something like
std::swap(pImpl, other.pImpl); )

It's fine to totally specialize std templates for user-defined types but never try to add something completely
new to std.


