When a TMP program finishes running, its output — pieces of C++ source code instantiated from templates 
— is then compiled as usual.

template<unsigned n>                 // general case: the value of
struct Factorial {                   // Factorial<n> is n times the value
                                     // of Factorial<n-1>
  enum { value = n * Factorial<n-1>::value };
};

template<>                           // special case: the value of
struct Factorial<0> {                // Factorial<0> is 1
  enum { value = 1 };
};

int main()
{
  std::cout << Factorial<5>::value;            // prints 120
  std::cout << Factorial<10>::value;           // prints 3628800
}

Some main use cases:
Ensuring dimensional unit correctness   example?
Optimizing matrix operations   lazy evaluation?
Generating custom design pattern implementations.


Things to Remember
Template metaprogramming can shift work from runtime to compile-time,
thus enabling earlier error detection and higher runtime performance.

TMP can be used to generate custom code based on combinations of policy choices, 
and it can also be used to avoid generating code inappropriate for particular types.
