template < ... >

class list {
public:
  class iterator {
  public:
    typedef bidirectional_iterator_tag iterator_category;
    ...
  }
...
};


template<typename IterT>

struct iterator_traits {
  typedef typename IterT::iterator_category iterator_category;
  ...
};

For raw pointer:
template<typename IterT> // partial template specialization

struct iterator_traits<IterT*> // for built-in pointer types
{
  typedef random_access_iterator_tag iterator_category;
  ...
};


This implementation will not work: 
as we cant and dont want to get this value at runtime

template<typename IterT, typename DistT>
void advance(IterT& iter, DistT d)
{
if (typeid(typename std::iterator_traits<IterT>::iterator_category) ==
typeid(std::random_access_iterator_tag))
...
}



template<typename IterT, typename DistT>
void advance(IterT& iter, DistT d)
{
doAdvance( // call the version
iter, d, // of doAdvance
typename // that is
std::iterator_traits<IterT>::iterator_category() // appropriate for
); // iter's iterator

} // category


Traits classes make information about types available during compilation. 
They're implemented using templates and template specializations.
In conjunction with overloading, traits classes make it possible 
to perform compile-time if...else tests on types.
